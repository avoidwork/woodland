{
  "name": "woodland",
  "tagline": "Lightweight HTTP/HTTPS router with virtual hosts",
  "body": "# woodland\r\n\r\n[![build status](https://secure.travis-ci.org/avoidwork/woodland.svg)](http://travis-ci.org/avoidwork/woodland)\r\n\r\nLightweight HTTP/HTTPS router with virtual hosts. Sets an accurate `Allow` header based on routes.\r\n\r\n## Example\r\n\r\n```javascript\r\n\"use strict\";\r\n\r\nconst http = require(\"http\");\r\nlet router = require(\"woodland\")({defaultHeaders: {\"Cache-Control\": \"no-cache\"}});\r\n\r\nrouter.use(\"/\", (req, res) => {\r\n\tres.writeHead(200, {\"Content-Type\": \"text/plain\"});\r\n\tres.end(\"Hello World!\");\r\n});\r\n\r\nhttp.createServer(router.route).listen(8000);\r\n```\r\n\r\n## Event Handlers\r\n##### onclose (req, res)\r\nExecutes if the connection was terminated before `res.end()` was called or able to flush.\r\n\r\n##### onerror (req, res, err)\r\nExecutes if the request cannot be routed, default handler sends a basic text response.\r\n\r\n##### onfinish (req, res)\r\nExecutes after the response has been sent.\r\n\r\n## API\r\n\r\n##### woodland ({cacheSize: 1000, defaultHeaders: {}, defaultHost: \"127.0.0.1\", hosts: [], seed: random})\r\nReturns a woodland router.\r\n\r\n##### allowed (method, uri, host, override = false)\r\nCalls `routes()` and returns a `Boolean` to indicate if `method` is allowed for `uri`.\r\n\r\n##### allows (uri, host, override = false)\r\nReturns a `String` for the `Allow` header. Caches value, & will update cache if `override` is `true`.\r\n\r\n##### blacklist (fn)\r\nBlacklists `fn` for calculating the return of `allows()`.\r\n\r\n##### decorate (req, res)\r\nDecorates `allow`, `body`, `ip`, `parsed`, `query`, & `host` on `req` and `header()` & `locals{}` on `res`.\r\n\r\n##### hash (arg)\r\nReturns a murmur3hash of `arg`.\r\n\r\n##### host (arg)\r\nDetermines the `host` for `arg`.\r\n\r\n##### route (req, res)\r\nFunction for `http.createServer()` or `https.createServer()`.\r\n\r\n##### routes (uri, host, method, override = false)\r\nReturns an `Array` of middleware for the request. Caches value, & will update cache if `override` is `true`.\r\n\r\n##### setHost (arg)\r\nRegisters a virtual host with the woodland.\r\n\r\n##### use (path, fn, method = \"GET\", host = \"all\")\r\nRegisters middleware for a route; `path` is a regular expression, and if not passed it defaults to `/.*`.\r\n\r\n##### url (req)\r\nConstructs a full URL from `req`.\r\n\r\n## License\r\nCopyright (c) 2016 Jason Mulligan\r\nLicensed under the BSD-3 license.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}